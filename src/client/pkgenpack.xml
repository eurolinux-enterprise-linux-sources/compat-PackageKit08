<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [

<!-- Process this file with docbook-to-man to generate an nroff manual
     page: `docbook-to-man manpage.xml > manpage.1'.  You may view
     the manual page with: `docbook-to-man manpage.xml | nroff -man |
     less'.  A typical entry in a Makefile or Makefile.am is:

manpage.1: manpage.xml
	docbook-to-man $< > $@

	The docbook-to-man binary is found in the docbook-to-man package.
	Please remember that if you create the nroff version in one of the
	debian/rules file targets (such as build), you will need to include
	docbook-to-man in your Build-Depends control field.
  -->

  <!-- Please adjust the date whenever revising the manpage. -->
  <!ENTITY date        "<date>31 July,2008</date>">
  <!-- SECTION should be 1-8, maybe w/ subsection other parameters are
       allowed: see man(7), man(1). -->
  <!ENTITY package     "pkgenpack">
  <!ENTITY gnu         "<acronym>GNU</acronym>">
  <!ENTITY gpl         "&gnu; <acronym>GPL</acronym>">
]>

<refentry>
  <refentryinfo>
    <copyright>
      <year>2008</year>
      <holder>Shishir Goel</holder>
    </copyright>
    &date;
  </refentryinfo>
  <refmeta>
    <refentrytitle>pkgenpack</refentrytitle>
    <manvolnum>1</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>&package;</refname>
    <refpurpose>PackageKit Pack Generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>&package;</command>
      <arg><option>--help</option></arg>
      <arg><option>--verbose</option></arg>
      <arg><option>--with-package-list</option></arg>
      <arg><option>--output</option></arg>
      <arg><option>--package</option></arg>
      <arg><option>--updates</option></arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>Description</title>
    <para>
      This manual page documents briefly the <command>&package;</command> command.
    </para>
    <para>
      <command>&package;</command> is the command line client for PackageKit for creating service packs.
    </para>
  </refsect1>
  <refsect1>
    <title>What is a Service Pack?</title>
    <para>
      A service pack is a tarball which contains a set of packages and their dependencies.
      The user can reduce the dependencies to be packed using the --with-package-list option.
      Along with the dependencies, a service pack has a file named metadata.conf which contains
      the information about the distribution and creation date of the pack.
    </para>
  </refsect1>
  <refsect1>
    <title>Creating a Service Pack?</title>
    <para>
      A service pack is created using the command <command>pkgenpack</command>.
    </para>
  </refsect1>
  <refsect1>
    <title>Options</title>
    <para>
      This program follows the usual &gnu; command line syntax, with long options
      starting with two dashes (`-').
      A summary of options is included below.
    </para>
    <variablelist>
      <varlistentry>
        <term>
          <option>--help</option>
        </term>
        <listitem>
          <para>Show summary of options.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--verbose</option>
        </term>
        <listitem>
          <para>Show extra debugging information.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--with-package-list</option>
        </term>
        <listitem>
          <para>Set the filename of dependencies to be excluded.</para>
          <para>
            Generally, the file list of packages is generated
            when doing a PackageKit refresh on the target system.
            If not specified, <command>pkgenpack</command> uses
            <filename>/var/lib/PackageKit/system.package-list</filename> by default.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--output</option>
        </term>
        <listitem>
          <para>The directory to put the pack file, or the current directory if omitted.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--package</option>
        </term>
        <listitem>
          <para>The package to be put into the ServicePack.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--updates</option>
        </term>
        <listitem>
          <para>Put all updates available in the ServicePack.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1>
    <title>Naming a Service Pack</title>
    <para>
     The only valid extension for a service pack is ".servicepack".
    </para>
  </refsect1>
  <refsect1>
    <title>Examples</title>
    <para>
      1. Tim is facing problems with his Internet connection at home.
      He needs a service pack with valgrind and it's dependencies for his system.
      He asks James to generate a pack for him.
      Both know James's system should contain similar packages as Tim's system,
      as both of them have installed Fedora 9 two days ago.
    </para>
    <para>
      James simply runs:
    </para>
<programlisting>
[james@jamesbook:~]$ pkgenpack --output=/media/USB/TimPacks --package=valgrind
</programlisting>
    <para>
     This generates a file <filename>/media/USB/TimPacks/valgrind-fedora-9-i686.servicepack</filename>
     on the USB key Tim gave to James.
     Tim can now go home, insert the USB key and double clicks on the
     <filename>valgrind-fedora-9-i686.servicepack</filename> file to be prompted
     to install these packages.
    </para>
    <para>
      2. Bill wants to create a service pack named <filename>kdegames-fedora-9-i686.servicepack</filename>
      for his new system which does not have an internet connection.
      He generates a list of packages on his system using <command>pkcon list-create</command>
      and copies that list to his USB key.
      He then gives that USB to Rishi who has a good internet connectivity.
      Rishi runs the following command on his system:
    </para>
<programlisting>
[rishi@devils-temple:~]$ pkgenpack --with-package-list=/media/USB/bill.package-list \
                                   --output=/home/rishi/Desktop --program=kdegames
</programlisting>
    <para>
      This generates a service pack, kdegames-fedora-9-i686.servicepack, on Rishi's
      Desktop, which can be distributed to Bill and users with similar requirements.
    </para>
  </refsect1>
  <refsect1>
    <title>Installing A Service Pack</title>
    <para>
      Service Packs can be installed using pkcon.
      For example:
    </para>
<programlisting>
[hacker@tim-lounge:~]$ pkcon install-local /media/USB/TimPacks/valgrind-fedora-9-i686.servicepack
</programlisting>
  </refsect1>
  <refsect1>
    <title>See Also</title>
    <para><command>pkmon</command> (1). <command>pkcon</command>(1).</para>
  </refsect1>
  <refsect1>
    <title>Author</title>
    <para>
      This manual page was written by Shishir Goel <email>crazyontheedge@gmail.com</email> and
      Richard Hughes <email>richard@hughsie.com</email>.
    </para>
  </refsect1>
</refentry>
